{"version":3,"sources":["componentes/Buscador.js","componentes/Imagen.js","componentes/Paginacion.js","componentes/Resultado.js","App.js","serviceWorker.js","index.js"],"names":["Buscador","busquedaRef","React","createRef","obtenerDatos","e","preventDefault","console","log","current","value","termino","props","datosBusqueda","onSubmit","this","className","ref","type","placeholder","Component","Imagen","imagen","largeImageURL","likes","previewURL","tags","views","src","alt","href","target","Paginacion","onClick","paginaAnterior","paginaSiguiente","Resultado","mostrarImagenes","imagenesRecibidas","imagenes","length","Fragment","map","imagenRecibida","key","id","App","state","terminoState","imagenesState","paginaState","scroll","document","querySelector","scrollIntoView","pagina","setState","consultarApi","terminoBusqueda","url","fetch","then","respuesta","json","resultado","hits","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.68883421.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Buscador extends Component {\r\n    \r\n    // createRef() permite leer los valores de los inputs con react\r\n    busquedaRef = React.createRef();\r\n\r\n    // funcion para obtener datos\r\n    obtenerDatos = (e) => {\r\n        e.preventDefault();\r\n        console.log('Desde el buscador ' + this.busquedaRef.current.value);\r\n\r\n        // Tomamos el valor del input\r\n        const termino = this.busquedaRef.current.value;\r\n        \r\n        // Se envía el valor del input al componente principal\r\n        this.props.datosBusqueda(termino);\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            //el evento onSubmit pertenece a react y es para mandar los datos al darle clic al boton submit\r\n            <form onSubmit={ this.obtenerDatos }>\r\n                <div className=\"row\">\r\n                    {/* \r\n                        con el props se reciben los datos desde otro componente \r\n                        solo se pueden pasar props del componente principal al hijo\r\n                    */}\r\n                    {/* this.props.mensaje */}\r\n                    <div className=\"form-group col-md-8\">\r\n                        <input  ref={ this.busquedaRef }\r\n                                type=\"text\" \r\n                                className=\"form-control form-control-lg\"\r\n                                placeholder=\"Busca tu imagen...\" \r\n                        />\r\n                    </div>\r\n                    <div className=\"form-group col-md-4\">\r\n                        <input  type=\"submit\" \r\n                                className=\"btn btn-lg btn-danger btn-block\"\r\n                                value=\"Buscar\" \r\n                        />\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Buscador;","import  React from 'react';\r\n\r\nconst Imagen = (props) => {\r\n\r\n    const { largeImageURL, likes, previewURL, tags, views } = props.imagen;\r\n\r\n    return (\r\n        <div className=\"col-12 col-sm-6 col-md-4 col-lg-3 mb-4\">\r\n            <div className=\"card\">\r\n                <img src={ previewURL } alt={ tags } className=\"card-img-top\" />\r\n                <div className=\"card-body\">\r\n                    <p className=\"card-text\">\r\n                        { likes } Me gusta\r\n                    </p>\r\n                    <p className=\"card-text\">\r\n                        { views } Vistas \r\n                    </p>\r\n                    <a  href={ largeImageURL } \r\n                        // eslint-disable-next-line react/jsx-no-target-blank\r\n                        target=\"_blank\" \r\n                        className=\"btn btn-primary btn-block\"\r\n                    >\r\n                        Ver Imagen\r\n                    </a>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Imagen;","import React from 'react';\r\n\r\nconst Paginacion = (props) => {\r\n    return (\r\n        <div className=\"py-3\">\r\n            <button onClick={ props.paginaAnterior } type=\"button\" className=\"btn btn-info mr-1\" >Anterior &larr;</button>\r\n            <button onClick={ props.paginaSiguiente } type=\"button\" className=\"btn btn-info\" >Siguiente &rarr;</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Paginacion;","import React, { Component } from 'react';\r\nimport Imagen from './Imagen';\r\nimport Paginacion from './Paginacion';\r\n\r\nclass Resultado extends Component {\r\n\r\n    mostrarImagenes = () => {\r\n\r\n        const imagenesRecibidas = this.props.imagenes;\r\n\r\n        if(imagenesRecibidas.length === 0) {\r\n            return null;\r\n        }\r\n\r\n        console.log( imagenesRecibidas );\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"col-12 p-5 row\">\r\n                    { imagenesRecibidas.map( imagenRecibida => (\r\n                        <Imagen \r\n                            key = { imagenRecibida.id }\r\n                            imagen = { imagenRecibida }\r\n                        />\r\n                    ))}\r\n                </div>\r\n                <Paginacion \r\n                    paginaAnterior  = { this.props.paginaAnterior }\r\n                    paginaSiguiente = { this.props.paginaSiguiente }\r\n                />\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                { this.mostrarImagenes() }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Resultado;","import React, { Component } from 'react';\nimport Buscador from './componentes/Buscador'\nimport Resultado from './componentes/Resultado';\n\nclass App extends Component {\n  \n  state = {\n    terminoState: '',\n    imagenesState: [],\n    paginaState: 1\n  }\n\n  // metodo que lleva después de elegir cualquier boton de paginación, hacia el jumbotron \n  scroll = () => {\n    const elemento = document.querySelector('.jumbotron');\n    elemento.scrollIntoView('smooth', 'start');\n  }\n\n  paginaAnterior = () => {\n    // leer el state de la pagina actual\n    let pagina = this.state.paginaState;\n\n    // leer si la pagina es uno \n    if (pagina === 1) {\n      return null;\n    }\n\n    // restar uno a la pagina actual\n    pagina--;\n\n    // agregar el cambio al state, CUANDO SE HACEN CAMBIOS AL STATE, PARA EJECUTAR UNA FUNCION\n    // SE TIENE QUE EJECUTAR EL CALLBACK CON UNA FUNCIÓN DE FLECHA COMO LA QUE SE MUESTRA \n    this.setState({\n      paginaState: pagina\n    }, () => {\n      this.consultarApi();\n      this.scroll();\n    });\n\n    console.log('Anterior... ' + pagina);\n  }\n  \n  paginaSiguiente = () => {\n    // leer el state de la pagina actual\n    let pagina = this.state.paginaState;\n\n    // sumar uno a la pagina actual\n    pagina++;\n\n    // agregar el cambio al state, CUANDO SE HACEN CAMBIOS AL STATE, PARA EJECUTAR UNA FUNCION\n    // SE TIENE QUE EJECUTAR EL CALLBACK CON UNA FUNCIÓN DE FLECHA COMO LA QUE SE MUESTRA\n    this.setState({\n      paginaState: pagina\n    }, () => {\n      this.consultarApi();\n      this.scroll();\n    });\n\n    console.log('Siguiente... ' + pagina);\n  }\n\n  consultarApi = () => {\n    \n    const terminoBusqueda = this.state.terminoState;\n    const pagina = this.state.paginaState;\n\n    const url = `https://pixabay.com/api/?key=13637572-2ce9ee79e5abb9578ce725977&q=${ terminoBusqueda }\n                  &per_page=30\n                  &page=${ pagina }`;\n\n    console.log( url );\n    fetch( url )\n      .then( respuesta => respuesta.json() )\n      .then( resultado => this.setState( { imagenesState : resultado.hits } ) );\n      //.then( resultado => console.log( resultado.hits ));\n  }\n\n  datosBusqueda = (termino) => {\n    console.log('Desde APP ' + termino);\n    this.setState({\n      terminoState: termino,\n      pagina: 1\n    }, () => {\n      this.consultarApi();\n    });\n  }\n\n  render() {\n    return (\n      // className se utiliza en javascript para dar estilos, ya que class es una palabra reservada del lenguaje\n      <div className=\"container\">\n        <div className=\"jumbotron\">\n          <p className=\"lead text-center\">Buscador de imágenes</p>\n\n          <Buscador \n            datosBusqueda={ this.datosBusqueda }\n          />\n        </div>\n        {/* this.state.terminoState */}\n        <div className=\"row text-center\">\n          <Resultado \n            imagenes={ this.state.imagenesState }\n            paginaAnterior  = { this.paginaAnterior }\n            paginaSiguiente = { this.paginaSiguiente }\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}